Terminals unused in grammar

   NUMBER
   TRUE
   FALSE
   RETURN
   BEGIN_PARAMS
   END_PARAMS
   BEGIN_LOCALS
   END_LOCALS
   BEGIN_BODY
   END_BODY
   INTEGER
   ARRAY
   OF
   IF
   THEN
   ENDIF
   ELSE
   WHILE
   DO
   FOR
   BEGINLOOP
   ENDLOOP
   CONTINUE
   READ
   WRITE
   COLON
   COMMA
   L_PAREN
   R_PAREN
   AND
   OR
   L_SQUARE_BRACKET
   R_SQUARE_BRACKET
   MULT
   DIV
   MOD
   ADD
   SUB
   LT
   LTE
   GT
   GTE
   EQ
   NEQ
   ASSIGN
   NOT


Grammar

    0 $accept: program $end

    1 program: functions

    2 functions: %empty
    3          | function functions

    4 function: FUNCTION IDENT SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENT (258) 4
NUMBER (259)
FUNCTION (260) 4
SEMICOLON (261) 4
TRUE (262)
FALSE (263)
RETURN (264)
BEGIN_PARAMS (265)
END_PARAMS (266)
BEGIN_LOCALS (267)
END_LOCALS (268)
BEGIN_BODY (269)
END_BODY (270)
INTEGER (271)
ARRAY (272)
OF (273)
IF (274)
THEN (275)
ENDIF (276)
ELSE (277)
WHILE (278)
DO (279)
FOR (280)
BEGINLOOP (281)
ENDLOOP (282)
CONTINUE (283)
READ (284)
WRITE (285)
COLON (286)
COMMA (287)
L_PAREN (288)
R_PAREN (289)
AND (290)
OR (291)
L_SQUARE_BRACKET (292)
R_SQUARE_BRACKET (293)
MULT (294)
DIV (295)
MOD (296)
ADD (297)
SUB (298)
LT (299)
LTE (300)
GT (301)
GTE (302)
EQ (303)
NEQ (304)
ASSIGN (305)
NOT (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
functions (54)
    on left: 2 3, on right: 1 3
function (55)
    on left: 4, on right: 3


State 0

    0 $accept: . program $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (functions)

    program    go to state 2
    functions  go to state 3
    function   go to state 4


State 1

    4 function: FUNCTION . IDENT SEMICOLON

    IDENT  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: functions .

    $default  reduce using rule 1 (program)


State 4

    3 functions: function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    4 function: FUNCTION IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 functions: function functions .

    $default  reduce using rule 3 (functions)


State 8

    4 function: FUNCTION IDENT SEMICOLON .

    $default  reduce using rule 4 (function)
