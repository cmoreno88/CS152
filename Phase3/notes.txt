/*These are the items I removed in moving from phase 2 to 3;
 * Christopher Moreno
 * CS152 Project_Phase_3
 * Description: Code Generator
 *
 * Below is the basic file layout:
 * DEFINTIONS
 * %%
 * GRAMMAR
 * %%
 * USER CODE
 */
/*GRAMMAR
* Some productions from the chart need 
* to be split up into terminal and 
* Non-Terminal versions like function
* Psuedo variables:
* $$ : $1 $2 $3 etc
* THIS is an example of calling yyerror
* exp:		NUMBER                { $$ = $1; }
*			| exp PLUS exp        { $$ = $1 + $3; }
*			| exp MINUS exp       { $$ = $1 - $3; }
*			| exp MULT exp        { $$ = $1 * $3; }
*			| exp DIV exp         { if ($3==0) yyerror("divide by zero"); else $$ = $1 / $3; }
*			| MINUS exp %prec UMINUS { $$ = -$2; }
*			| L_PAREN exp R_PAREN { $$ = $2; }
*			;
* For EPSILON in one of the production rules we can handle it the
* same way we did with program->functions->function
*/

%code requires 
{
 #include <stdlib.h>
 #include <string>
 #include <list>
 #include <functional>
 using namespace std;
 #include <vector>
 #include "y.tab.h"
 void yyerror(const char *msg);		/*declaration given by TA*/
 //extern char * identVal;
 
 bool no_error = true;
 int num_temps = 0;

}

%code
{
#include "parser.tab.hh"

	/* you may need these header files 
	 * add more header file if you need more
	 */
#include <iostream>
#include <sstream>
#include <map>
#include <regex>
#include <set>
yy::parser::symbol_type yylex();
	
	/* define your symbol table, global variables,
	 * list of keywords or any function you may need here */
	
	/*
	* struct dec_type(
	*	string code;
	*	list<string> ids;
	* )
	* SYMBOL TABLE EXAMPLE
	* map<string, int> symbol_table; // 0 = scalar, 1 = array name, 2 = function name

	* string make_temps(){
	*	string ret = "_temp_" + itoa(num_temps);
	*	num_temps++;
	* }
	*/
	/* end of your code */
}



/* %d is for digit in C
int main(int argc, char ** argv)
{
	if(argc >= 2)
	{
		yyin = fopen(argv[1], "r");
		if(yyin == NULL)
		{
			yyin = stdin;
		}
	}
	else
	{
		yyin = stdin;
	}
	yyparse();			// calls yylex()
	
	return 1;
}

void yyerror(const char *msg) {
   printf("** Line %d, position %d: %s\n", cur_line, cur_pos, msg);
}
*/
